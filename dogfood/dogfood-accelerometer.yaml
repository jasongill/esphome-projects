esphome:
  name: dogfood
  name_add_mac_suffix: true
  platformio_options:
    upload_speed: 460800
    build_flags:
        - -DgetDCHighVoltagePowerDowmEn=getDCHighVoltagePowerDownEn
        - -DgetDC1LowVoltagePowerDowmEn=getDC1LowVoltagePowerDownEn
        - -DgetDC2LowVoltagePowerDowmEn=getDC2LowVoltagePowerDownEn
        - -DgetDC3LowVoltagePowerDowmEn=getDC3LowVoltagePowerDownEn
        - -DgetDC4LowVoltagePowerDowmEn=getDC4LowVoltagePowerDownEn
        - -DgetDC5LowVoltagePowerDowmEn=getDC5LowVoltagePowerDownEn
  libraries:
    - lewisxhe/XPowersLib @ ^0.2.6
  on_boot:
    priority: 900
    then:
      - component.update: axp
      - delay: 200ms
esp32:
  board: m5stack-core2
  framework:
    type: arduino
    version: recommended

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

debug:

captive_portal:

web_server:
  port: 80

logger:
    level: INFO

api:

ota:
  - platform: esphome

time:
  - platform: sntp
    id: sntp_time
    timezone: America/New_York

globals:
  - id: last_fed_epoch
    type: time_t
    restore_value: 'yes'
    initial_value: '0'

script:
  - id: mark_fed
    then:
      - lambda: >-
          auto now = id(sntp_time).now();
          if (!now.is_valid()) { ESP_LOGW("feed","No time; skip"); return; }
          if (id(last_fed_epoch) && (now.timestamp - id(last_fed_epoch)) < 60) {
          ESP_LOGI("feed","Cooldown"); return; }
          id(last_fed_epoch) = now.timestamp;

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

i2c:
  - id: bus_a
    sda: GPIO21
    scl: GPIO22
    scan: true
    frequency: 400kHz
sensor:
  - platform: template
    name: Time Since Dogs Were Fed
    id: minutes_since_fed
    unit_of_measurement: min
    accuracy_decimals: 0
    icon: mdi:dog
    update_interval: 60s
    lambda: |-
      auto now = id(sntp_time).now();
      if (!now.is_valid() || id(last_fed_epoch) == 0) return NAN;
      return (now.timestamp - id(last_fed_epoch)) / 60.0f;
  - platform: mpu6886
    address: 104
    update_interval: 200ms
    accel_x:
      internal: true
      id: accel_x
    accel_y:
      internal: true
      id: accel_y
    accel_z:
      internal: true
      id: accel_z
  - platform: axp2101
    model: M5CORE2
    address: 0x34
    i2c_id: bus_a
    id: axp
    update_interval: 30s
    battery_level:
      name: "Battery Level"
      id: battery_level
    battery_voltage:
      name: "Battery Voltage"
      id: battery_voltage

font:
  - file: 'gfonts://Roboto'
    id: font_lg
    size: 48
  - file: 'gfonts://Roboto'
    id: font_md
    size: 36
  - file: 'gfonts://Roboto'
    id: font_sm
    size: 20
  - file: 'gfonts://Noto+Emoji'
    id: emoji_sm
    size: 28
    glyphs: "ðŸ”‹"

display:
  - platform: ili9xxx
    model: ili9342
    cs_pin: GPIO5
    dc_pin: GPIO15
    reset_pin: GPIO33
    invert_colors: true
    show_test_card: false
    dimensions:
      width: 320
      height: 240
    transform:
      mirror_x: false
    update_interval: 1s
    lambda: |-
      it.fill(Color::BLACK);
      auto now = id(sntp_time).now();
      if (id(last_fed_epoch) != 0 && now.is_valid()) {
        const uint32_t diff = now.timestamp - id(last_fed_epoch);
        const int h = (diff % 86400) / 3600, m = (diff % 3600) / 60, s = diff % 60;
        it.printf(160,20, id(font_md), TextAlign::TOP_CENTER, "Dogs Last Fed");
        it.printf(160,80, id(font_lg), TextAlign::TOP_CENTER, "%dh %dm %ds", h, m, s);
        auto fed_time = ESPTime::from_epoch_local(id(last_fed_epoch));
        char fed_buf[32];
        fed_time.strftime(fed_buf, sizeof(fed_buf), "%I:%M %p");
        if (fed_buf[0] == '0') {
          memmove(fed_buf, fed_buf + 1, strlen(fed_buf));
        }
        it.printf(160,140, id(font_md), TextAlign::TOP_CENTER, "%s", fed_buf);
      }
      if (id(battery_level).has_state() && (int)id(battery_level).state < 100) {
        it.printf(160, 210, id(font_sm), TextAlign::TOP_CENTER, "%d%%", (int)id(battery_level).state);
        it.printf(190, 208, id(emoji_sm), COLOR_ON, TextAlign::TOP_CENTER, "ðŸ”‹", COLOR_OFF);
      }

external_components:
  - source: github://stefanthoss/esphome-axp2101
    components: [axp2101]

binary_sensor:
  - platform: template
    id: lid_lifted
    device_class: opening
    lambda: |-
      if (!id(accel_x).has_state() || !id(accel_y).has_state() || !id(accel_z).has_state()) {
        return false;
      }
      const float ax = id(accel_x).state;
      const float ay = id(accel_y).state;
      const float az = id(accel_z).state;

      // Normalize to g vector
      const float gmag = sqrtf(ax*ax + ay*ay + az*az);
      if (gmag < 1.0f) return false;  // sanity check

      const float nz = az / gmag;  // cosine of angle to vertical
      const float angle = acosf(nz) * 180.0f / 3.14159f;  // degrees

      // Trigger if tilted more than 30Â° from vertical
      return angle > 20.0f;
    filters:
      - delayed_on: 500ms   # require sustained tilt
      - delayed_off: 2s
    on_press:
      - script.execute: mark_fed
